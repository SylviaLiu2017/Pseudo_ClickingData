sum(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
sum(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
sum(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
sum(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], data[1,], potato_true_ranking, 1.,1.))
sourceCpp("./clickingAlgo.cpp")
sourceCpp("./clickingAlgo.cpp")
sourceCpp("./clickingAlgo.cpp")
a<-SampleForOneUserClicks(clicking_data[1,], potato_true_ranking, 1.,1.)
a
sum(a)
sum(SampleForOneUserClicks(clicking_data[1,], potato_true_ranking, 1.,1.))
sum(SampleForOneUserClicks(clicking_data[1,], potato_true_ranking, 1.,1.))
sum(SampleForOneUserClicks(clicking_data[1,], potato_true_ranking, 1.,1.))
sum(SampleForOneUserClicks(clicking_data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], potato_true_ranking, 1.,1.))
(SampleForOneUserClicks(clicking_data[1,], potato_true_ranking, 1.,1.))
a<-SampleForOneUserClicks(clicking_data[2,], potato_true_ranking, 1.,1.)
a
sum(a)
sourceCpp("./clickingAlgo.cpp")
sourceCpp("./clickingAlgo.cpp")
sourceCpp("./clickingAlgo.cpp")
source("./allFunctions.R")
source("./pseudoSamplingFuncs.R")
data_mode<-"potatoes"
#################generate some data###################
if(data_mode=="simulation"){
n<-20
N<-50
rho0<-1:n
alpha0<-3
load("./Cdfootrule.RData")
if(n>20){
fitvec = estimate_partition_function(alpha_vector = seq(0.01,10,0.2), n_items = 50,metric = "footrule", nmc = 2000,degree=10)
}
origin_data<-sample_mallows(rho0 = rho0,alpha0 = alpha0, n_samples = N)
}else if (data_mode == "potatoes"){
origin_data<-potato_visual
rho0<-potato_true_ranking
N<-dim(origin_data)[1]
n<-dim(origin_data)[2]
}
n<-dim(origin_data)[2]
N<-dim(origin_data)[1]
lambda<-5
clicking_data<-createClickData(origin_data,lambda)
centre_inferred<-n+1-rank(apply(clicking_data,2,sum),ties.method = "first")
data_init<-t(apply(clicking_data,1,generateInit_oneuser_2,centre = centre_inferred))
n_samples<-100
results<-PseudoForClicks(n_samples=n_samples,clicking_data=clicking_data, data_init = data_init, alpha =10,sigma=0)
results
dim(results$individuals)
n_samples<-1000
results<-PseudoForClicks(n_samples=n_samples,clicking_data=clicking_data, data_init = data_init, alpha =10,sigma=0)
dim(results$individuals)
n_samples<-5000
start = proc.time()
results<-PseudoForClicks(n_samples=n_samples,clicking_data=clicking_data, data_init = data_init, alpha =10,sigma=0)
duration = proc.time()-start
duration
dim(results$individuals)
n_samples<-5000
rhoSamples<-vector()
data_curr<-data_init
sigma<-0
userArray3D<-data_init
user2D<-data_init
colnames(data_init)<-1:n
start <- proc.time()
for(sample_i in 1:n_samples){
print(sample_i)
rho_curr<-sampleRho(user2D,sigma,alpha0 = 10)
rhoSamples<-rbind(rhoSamples,rho_curr)
user2D<-t(apply(clicking_data,1,sampleForOneUserClicks,rho_curr=rho_curr,alpha0=10))
userArray3D<-abind(userArray3D,user2D,along = 3)
}
5%5
5%%5
start <- proc.time()
for(sample_i in 1:n_samples){
if(sample_i%%1000==0){
print(sample_i)
}
rho_curr<-sampleRho(user2D,sigma,alpha0 = 10)
rhoSamples<-rbind(rhoSamples,rho_curr)
user2D<-t(apply(clicking_data,1,sampleForOneUserClicks,rho_curr=rho_curr,alpha0=10))
userArray3D<-abind(userArray3D,user2D,along = 3)
}
start <- proc.time()
for(sample_i in 1:n_samples){
if(sample_i%%100==0){
print(sample_i)
}
rho_curr<-sampleRho(user2D,sigma,alpha0 = 10)
rhoSamples<-rbind(rhoSamples,rho_curr)
user2D<-t(apply(clicking_data,1,sampleForOneUserClicks,rho_curr=rho_curr,alpha0=10))
userArray3D<-abind(userArray3D,user2D,along = 3)
}
duration2<-proc.time()-start
duration2
n_samples<-5000
start = proc.time()
results<-PseudoForClicks(n_samples=n_samples,clicking_data=clicking_data, data_init = data_init, alpha =10,sigma=0)
durationCpp = proc.time()-start
durationCpp
data_mode<-"simulation"
#################generate some data###################
if(data_mode=="simulation"){
n<-50
N<-50
rho0<-1:n
alpha0<-3
load("./Cdfootrule.RData")
if(n>20){
fitvec = estimate_partition_function(alpha_vector = seq(0.01,10,0.2), n_items = 50,metric = "footrule", nmc = 2000,degree=10)
}
origin_data<-sample_mallows(rho0 = rho0,alpha0 = alpha0, n_samples = N)
}else if (data_mode == "potatoes"){
origin_data<-potato_visual
rho0<-potato_true_ranking
N<-dim(origin_data)[1]
n<-dim(origin_data)[2]
}
n<-dim(origin_data)[2]
N<-dim(origin_data)[1]
lambda<-5
clicking_data<-createClickData(origin_data,lambda)
centre_inferred<-n+1-rank(apply(clicking_data,2,sum),ties.method = "first")
data_init<-t(apply(clicking_data,1,generateInit_oneuser_2,centre = centre_inferred))
n_samples<-5000
start = proc.time()
results<-PseudoForClicks(n_samples=n_samples,clicking_data=clicking_data, data_init = data_init, alpha =10,sigma=0)
durationCpp = proc.time()-start
durationCpp
start <- proc.time()
for(sample_i in 1:n_samples){
if(sample_i%%100==0){
print(sample_i)
}
rho_curr<-sampleRho(user2D,sigma,alpha0 = 10)
rhoSamples<-rbind(rhoSamples,rho_curr)
user2D<-t(apply(clicking_data,1,sampleForOneUserClicks,rho_curr=rho_curr,alpha0=10))
userArray3D<-abind(userArray3D,user2D,along = 3)
}
duration2<-proc.time()-start
rhoSamples<-vector()
data_curr<-data_init
sigma<-0
userArray3D<-data_init
user2D<-data_init
colnames(data_init)<-1:n
start <- proc.time()
for(sample_i in 1:n_samples){
if(sample_i%%100==0){
print(sample_i)
}
rho_curr<-sampleRho(user2D,sigma,alpha0 = 10)
rhoSamples<-rbind(rhoSamples,rho_curr)
user2D<-t(apply(clicking_data,1,sampleForOneUserClicks,rho_curr=rho_curr,alpha0=10))
userArray3D<-abind(userArray3D,user2D,along = 3)
}
duration2<-proc.time()-start
duration2
duration
userArray3D<-userArray3D[,,1001:n_samples]
K<-2
recs<-vector()
truth<-vector()
for(userj in 1:N){
heatMat_userj<-heatMap(t(userArray3D[userj,,]),1:n)
recs<-rbind(recs,recommendK(heatMat_userj,K, clicking_data[userj,],type="click"))
truth<-rbind(truth, realTopK(clicking_data[userj,], origin_data[userj,],K,type="click"))
}
correctOrWrong<-recs
for(userj in 1:N){
correctOrWrong[userj,]<-recs[userj,]%in%truth[userj,]
}
mean(correctOrWrong)
alpha0
n
dim(results$individuals)
userArray3D_cpp<-results$individuals[,,1001:n_samples]
K<-2
recs<-vector()
truth<-vector()
userArray3D_cpp<-results$individuals[,,1001:n_samples]
K<-2
recs<-vector()
truth<-vector()
for(userj in 1:N){
heatMat_userjCpp<-heatMap(t(userArray3D_cpp[userj,,]),1:n)
recsCpp<-rbind(recsCpp,recommendK(heatMat_userjCpp,K, clicking_data[userj,],type="click"))
truthCpp<-rbind(truthCpp, realTopK(clicking_data[userj,], origin_data[userj,],K,type="click"))
}
userArray3D_cpp<-results$individuals[,,1001:n_samples]
K<-2
recsCpp<-vector()
truthCpp<-vector()
for(userj in 1:N){
heatMat_userjCpp<-heatMap(t(userArray3D_cpp[userj,,]),1:n)
recsCpp<-rbind(recsCpp,recommendK(heatMat_userjCpp,K, clicking_data[userj,],type="click"))
truthCpp<-rbind(truthCpp, realTopK(clicking_data[userj,], origin_data[userj,],K,type="click"))
}
correctOrWrongCpp<-recsCpp
for(userj in 1:N){
correctOrWrongCpp[userj,]<-recsCpp[userj,]%in%truth[userj,]
}
correctOrWrongCpp<-recsCpp
for(userj in 1:N){
correctOrWrongCpp[userj,]<-recsCpp[userj,]%in%truthCpp[userj,]
}
mean(correctOrWrongCpp)
mean(correctOrWrong)
heatMat_pseudo<-heatMap(rhoSamples,rho0)
par(mai=c(1,1,0.65,1))
image(heatMat_pseudo,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
par(mai=c(1,1,0.65,1))
image.plot(heatMat_pseudo, zlim=c(0,1),legend.only=T,horizontal = F)
heatMat_pseudo_Cpp<-heatMap(results$rhoMat,rho0)
par(mai=c(1,1,0.65,1))
image(heatMat_pseudo_Cpp,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
par(mai=c(1,1,0.65,1))
image.plot(heatMat_pseudo, zlim=c(0,1),legend.only=T,horizontal = F)
image(heatMat_pseudo_Cpp,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
image(heatMat_pseudo,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
image(heatMat_pseudo_Cpp,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
data_mode<-"potatoes"
#################generate some data###################
if(data_mode=="simulation"){
n<-20
N<-50
rho0<-1:n
alpha0<-3
load("./Cdfootrule.RData")
if(n>20){
fitvec = estimate_partition_function(alpha_vector = seq(0.01,10,0.2), n_items = 50,metric = "footrule", nmc = 2000,degree=10)
}
origin_data<-sample_mallows(rho0 = rho0,alpha0 = alpha0, n_samples = N)
}else if (data_mode == "potatoes"){
origin_data<-potato_visual
rho0<-potato_true_ranking
N<-dim(origin_data)[1]
n<-dim(origin_data)[2]
}
n<-dim(origin_data)[2]
N<-dim(origin_data)[1]
lambda<-5
clicking_data<-createClickData(origin_data,lambda)
centre_inferred<-n+1-rank(apply(clicking_data,2,sum),ties.method = "first")
data_init<-t(apply(clicking_data,1,generateInit_oneuser_2,centre = centre_inferred))
n_samples<-5000
rhoSamples<-vector()
data_curr<-data_init
sigma<-0
userArray3D<-data_init
user2D<-data_init
colnames(data_init)<-1:n
start <- proc.time()
for(sample_i in 1:n_samples){
if(sample_i%%100==0){
print(sample_i)
}
rho_curr<-sampleRho(user2D,sigma,alpha0 = 10)
rhoSamples<-rbind(rhoSamples,rho_curr)
user2D<-t(apply(clicking_data,1,sampleForOneUserClicks,rho_curr=rho_curr,alpha0=10))
userArray3D<-abind(userArray3D,user2D,along = 3)
}
duration2<-proc.time()-start
userArray3D<-userArray3D[,,1001:n_samples]
K<-2
recs<-vector()
truth<-vector()
for(userj in 1:N){
heatMat_userj<-heatMap(t(userArray3D[userj,,]),1:n)
recs<-rbind(recs,recommendK(heatMat_userj,K, clicking_data[userj,],type="click"))
truth<-rbind(truth, realTopK(clicking_data[userj,], origin_data[userj,],K,type="click"))
}
correctOrWrong<-recs
for(userj in 1:N){
correctOrWrong[userj,]<-recs[userj,]%in%truth[userj,]
}
mean(correctOrWrong)
heatMat_pseudo<-heatMap(rhoSamples,rho0)
par(mai=c(1,1,0.65,1))
image(heatMat_pseudo,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
par(mai=c(1,1,0.65,1))
image.plot(heatMat_pseudo, zlim=c(0,1),legend.only=T,horizontal = F)
n_samples<-5000
start = proc.time()
results<-PseudoForClicks(n_samples=n_samples,clicking_data=clicking_data, data_init = data_init, alpha =10,sigma=0)
durationCpp = proc.time()-start
userArray3D_cpp<-results$individuals[,,1001:n_samples]
K<-2
recsCpp<-vector()
truthCpp<-vector()
for(userj in 1:N){
heatMat_userjCpp<-heatMap(t(userArray3D_cpp[userj,,]),1:n)
recsCpp<-rbind(recsCpp,recommendK(heatMat_userjCpp,K, clicking_data[userj,],type="click"))
truthCpp<-rbind(truthCpp, realTopK(clicking_data[userj,], origin_data[userj,],K,type="click"))
}
correctOrWrongCpp<-recsCpp
for(userj in 1:N){
correctOrWrongCpp[userj,]<-recsCpp[userj,]%in%truthCpp[userj,]
}
mean(correctOrWrongCpp)
heatMat_pseudo<-heatMap(rhoSamples,rho0)
par(mai=c(1,1,0.65,1))
image(heatMat_pseudo,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
par(mai=c(1,1,0.65,1))
image.plot(heatMat_pseudo, zlim=c(0,1),legend.only=T,horizontal = F)
heatMat_pseudo_Cpp<-heatMap(results$rhoMat,rho0)
rho0
par(mai=c(1,1,0.65,1))
image(heatMat_pseudo_Cpp,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
image(heatMat_pseudo_Cpp,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
image(heatMat_pseudo,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
alpha0
alpha
duration
durationCpp
duration2
userArray3D_cpp<-results$individuals[,,1001:n_samples]
K<-2
recsCpp<-vector()
truthCpp<-vector()
for(userj in 1:N){
heatMat_userjCpp<-heatMap(t(userArray3D_cpp[userj,,]),1:n)
recsCpp<-rbind(recsCpp,recommendK(heatMat_userjCpp,K, clicking_data[userj,],type="click"))
truthCpp<-rbind(truthCpp, realTopK(clicking_data[userj,], origin_data[userj,],K,type="click"))
}
correctOrWrongCpp<-recsCpp
for(userj in 1:N){
correctOrWrongCpp[userj,]<-recsCpp[userj,]%in%truthCpp[userj,]
}
mean(correctOrWrongCpp)
heatMat_pseudo<-heatMap(rhoSamples,rho0)
par(mai=c(1,1,0.65,1))
image(heatMat_pseudo,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
par(mai=c(1,1,0.65,1))
image.plot(heatMat_pseudo, zlim=c(0,1),legend.only=T,horizontal = F)
heatMat_pseudo_Cpp<-heatMap(results$rhoMat,rho0)
par(mai=c(1,1,0.65,1))
image(heatMat_pseudo_Cpp,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
image(heatMat_pseudo,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
image(heatMat_pseudo_Cpp,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
rm(list=ls())
require(RcppArmadillo)
require(Rcpp)
require(BayesMallows)
require(fields)
sourceCpp("./clickingAlgo.cpp")
source("./allFunctions.R")
source("./pseudoSamplingFuncs.R")
data_mode<-"simulation"
#################generate some data###################
if(data_mode=="simulation"){
n<-50
N<-50
rho0<-1:n
alpha0<-3
load("./Cdfootrule.RData")
if(n>20){
fitvec = estimate_partition_function(alpha_vector = seq(0.01,10,0.2), n_items = 50,metric = "footrule", nmc = 2000,degree=10)
}
origin_data<-sample_mallows(rho0 = rho0,alpha0 = alpha0, n_samples = N)
}else if (data_mode == "potatoes"){
origin_data<-potato_visual
rho0<-potato_true_ranking
N<-dim(origin_data)[1]
n<-dim(origin_data)[2]
}
n<-dim(origin_data)[2]
N<-dim(origin_data)[1]
lambda<-5
clicking_data<-createClickData(origin_data,lambda)
centre_inferred<-n+1-rank(apply(clicking_data,2,sum),ties.method = "first")
data_init<-t(apply(clicking_data,1,generateInit_oneuser_2,centre = centre_inferred))
n_samples<-5000
start = proc.time()
results<-PseudoForClicks(n_samples=n_samples,clicking_data=clicking_data, data_init = data_init, alpha =10,sigma=0)
durationCpp = proc.time()-start
dim(results$rhoMat)
dim(results$individuals)
userArray3D_cpp<-results$individuals[,,1001:n_samples]
K<-2
recsCpp<-vector()
truthCpp<-vector()
for(userj in 1:N){
heatMat_userjCpp<-heatMap(t(userArray3D_cpp[userj,,]),1:n)
recsCpp<-rbind(recsCpp,recommendK(heatMat_userjCpp,K, clicking_data[userj,],type="click"))
truthCpp<-rbind(truthCpp, realTopK(clicking_data[userj,], origin_data[userj,],K,type="click"))
}
correctOrWrongCpp<-recsCpp
for(userj in 1:N){
correctOrWrongCpp[userj,]<-recsCpp[userj,]%in%truthCpp[userj,]
}
mean(correctOrWrongCpp)
data
clicking_data
dim(clicking_data)
duration
durationCpp
data_mode<-"potatoes"
#################generate some data###################
if(data_mode=="simulation"){
n<-50
N<-50
rho0<-1:n
alpha0<-3
load("./Cdfootrule.RData")
if(n>20){
fitvec = estimate_partition_function(alpha_vector = seq(0.01,10,0.2), n_items = 50,metric = "footrule", nmc = 2000,degree=10)
}
origin_data<-sample_mallows(rho0 = rho0,alpha0 = alpha0, n_samples = N)
}else if (data_mode == "potatoes"){
origin_data<-potato_visual
rho0<-potato_true_ranking
N<-dim(origin_data)[1]
n<-dim(origin_data)[2]
}
n<-dim(origin_data)[2]
N<-dim(origin_data)[1]
lambda<-5
clicking_data<-createClickData(origin_data,lambda)
centre_inferred<-n+1-rank(apply(clicking_data,2,sum),ties.method = "first")
data_init<-t(apply(clicking_data,1,generateInit_oneuser_2,centre = centre_inferred))
n_samples<-5000
start = proc.time()
results<-PseudoForClicks(n_samples=n_samples,clicking_data=clicking_data, data_init = data_init, alpha =10,sigma=0)
durationCpp = proc.time()-start
dim(results$rhoMat)
dim(results$individuals)
userArray3D_cpp<-results$individuals[,,1001:n_samples]
K<-2
recsCpp<-vector()
truthCpp<-vector()
for(userj in 1:N){
heatMat_userjCpp<-heatMap(t(userArray3D_cpp[userj,,]),1:n)
recsCpp<-rbind(recsCpp,recommendK(heatMat_userjCpp,K, clicking_data[userj,],type="click"))
truthCpp<-rbind(truthCpp, realTopK(clicking_data[userj,], origin_data[userj,],K,type="click"))
}
correctOrWrongCpp<-recsCpp
for(userj in 1:N){
correctOrWrongCpp[userj,]<-recsCpp[userj,]%in%truthCpp[userj,]
}
mean(correctOrWrongCpp)
heatMat_pseudo<-heatMap(rhoSamples,rho0)
par(mai=c(1,1,0.65,1))
heatMat_pseudo_Cpp<-heatMap(results$rhoMat,rho0)
par(mai=c(1,1,0.65,1))
image(heatMat_pseudo_Cpp,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
par(mai=c(1,1,0.65,1))
image.plot(heatMat_pseudo, zlim=c(0,1),legend.only=T,horizontal = F)
image.plot(heatMat_pseudo_Cpp, zlim=c(0,1),legend.only=T,horizontal = F)
n_samples<-5000
rhoSamples<-vector()
data_curr<-data_init
sigma<-0
userArray3D<-data_init
user2D<-data_init
colnames(data_init)<-1:n
start <- proc.time()
for(sample_i in 1:n_samples){
if(sample_i%%100==0){
print(sample_i)
}
rho_curr<-sampleRho(user2D,sigma,alpha0 = 10)
rhoSamples<-rbind(rhoSamples,rho_curr)
user2D<-t(apply(clicking_data,1,sampleForOneUserClicks,rho_curr=rho_curr,alpha0=10))
userArray3D<-abind(userArray3D,user2D,along = 3)
}
duration2<-proc.time()-start
userArray3D<-userArray3D[,,1001:n_samples]
K<-2
recs<-vector()
truth<-vector()
for(userj in 1:N){
heatMat_userj<-heatMap(t(userArray3D[userj,,]),1:n)
recs<-rbind(recs,recommendK(heatMat_userj,K, clicking_data[userj,],type="click"))
truth<-rbind(truth, realTopK(clicking_data[userj,], origin_data[userj,],K,type="click"))
}
correctOrWrong<-recs
for(userj in 1:N){
correctOrWrong[userj,]<-recs[userj,]%in%truth[userj,]
}
mean(correctOrWrong)
mean(correctOrWrongCpp)
heatMat_pseudo<-heatMap(rhoSamples,rho0)
par(mai=c(1,1,0.65,1))
image(heatMat_pseudo,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
par(mai=c(1,1,0.65,1))
image.plot(heatMat_pseudo, zlim=c(0,1),legend.only=T,horizontal = F)
image(heatMat_pseudo_Cpp,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
image(heatMat_pseudo,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
image(heatMat_pseudo_Cpp,col=tim.colors(64*10),zlim=c(0,1),axes=F,cex.lab=2, main="pseudo-likelihood")
